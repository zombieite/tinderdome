mkdir -p /Users/$USER/Desktop/local/web

sudo chmod 777 /Library/WebServer/Documents

rm -f /Library/WebServer/Documents/*

cd /Library/WebServer/Documents

git clone git@github.com:zombieite/tinderdome.git

ln -s /Library/WebServer/Documents/tinderdome /Users/zombieite/Desktop/local/web/

# apache config is /etc/apache2/httpd.conf but hopefully we can leave this alone

apachectl configtest

echo "<html><body><h1>Welcome to my site</h1></body></html>" >/Library/WebServer/Documents/index.html

sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist

# visit http://localhost to verify it is working

sudo /usr/sbin/apachectl restart

sudo /usr/sbin/apachectl stop

sudo /usr/sbin/apachectl start

# https://ssl-config.mozilla.org/#server=apache&server-version=2.4.39&config=intermediate
sudo ln -s /Users/$USER/Desktop/local/web/tinderdome/apache/youareawaited.com.conf /private/etc/apache2/other/youareawaited.com.conf

# go into /private/etc/apache2/other/youareawaited.com.conf
# comment out most of the contents of <VirtualHost *:80> but leave those section delimiters and "ServerName youareawaited.com" in place
# comment out Listen 443
# comment out <VirtualHost *:443> section including those section delimiters

apachectl configtest

# install brew if necessary
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

# https://certbot.eff.org/lets-encrypt/osx-apache
# install letsencrypt certbot
brew install letsencrypt
sudo certbot --apache
echo "0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew" | sudo tee -a /etc/crontab > /dev/null

# to renew, i think you can just do:
#certbot renew
# from above cron, if the cron doesn't take care of it for you.

# site should be visible but with errors at this point

cd ~

# Get composer (may need to get homebrew first)
curl -sS https://getcomposer.org/installer | /usr/bin/php

# get php ext zip
brew update
brew install php@7.3
brew link php@7.3 --force

/Users/$USER/composer.phar global require "laravel/installer"

mv /Users/$USER/composer.phar /Users/$USER/composer
PATH=$PATH:/Users/$USER/.composer/vendor/bin
PATH=$PATH:/Users/$USER/

cd /Library/WebServer/Documents/

laravel new tinderdome --force # force means who cares that there is stuff in there already
# might need to go into .composer/vendor/laravel/installer/src/NewCommand.php and change line to:
# $process = new Process(implode(' && ', $commands), $directory, null, null, null);

mv tinderdome/.env.example tinderdome/.env

cd tinderdome

/Users/$USER/composer install

php artisan key:generate

git diff

# use vendor versions, my versions, or some combination of each as necessary. work on removing files from git if the vendor versions are what we want.
# git checkout -- <file> # Use my modifications instead of defaults
# git commit <file>      # Add vendor changes to git repo, or consider removing this file from repo

# Install image resizer
/Users/$USER/composer require intervention/image

mkdir -p /Library/WebServer/Documents/tinderdome/storage/framework/sessions
mkdir -p /Library/WebServer/Documents/tinderdome/bootstrap/cache
chmod 777 /Library/WebServer/Documents/tinderdome
chmod 777 /Library/WebServer/Documents/tinderdome/storage
chmod 777 /Library/WebServer/Documents/tinderdome/storage/logs
chmod 777 /Library/WebServer/Documents/tinderdome/storage/framework
chmod 777 /Library/WebServer/Documents/tinderdome/storage/framework/sessions
chmod 777 /Library/WebServer/Documents/tinderdome/bootstrap/cache
# find . -name '*.php' | xargs chmod 755

brew install mysql

mysql.server start

mysql_secure_installation # answer questions in secure way

vi .env # Set this stuff:
# DB_DATABASE=tinderdome
# DB_USERNAME=root # This should work on day 1 but change this
# DB_PASSWORD=? # Whatever you set it to during mysql_secure_installation

# make php connection work (use whatever you set password to during mysql_secure_installation)
mysql -uroot -p
alter user 'root'@'localhost' identified with mysql_native_password by '<password>';

create database tinderdome;

^D

# Set up backups of production server to local disk, if we are not production server. Or, if we are the production server, then get the copy once and load it up and make sure our backup server is backing up our db instead.
mysql -uroot -p tinderdome < /Users/$USER/Desktop/remote/server/web/backup/mysqldump.sql

# Get all user images not in repo. See above, figure out long-term backup strategy but this gets it up for now.
mkdir /Users/$USER/Desktop/local/web/tinderdome/public/uploads
cp /Users/$USER/Desktop/remote/server/web/php/public/uploads/* public/uploads/

# tail logs
tail -f storage/logs/laravel-*.log
tail -f /var/log/apache2/error_log
tail -f /var/log/apache2/access_log

# http://localhost/ should now work

# Set up backup rsync script to sync files not in repo and keep mysql backed up

# Instructions to run scripts from command line using your code and Laravel's code:
#php artisan make:command MyCommand.
# Go to app/Console/Commands/MyCommand.php
# Find:
# protected $signature = 'command:name';
# Change to:
# protected $signature = 'my:command';
# In the handle() method you can add your code:
# use Illuminate\Support\Facades\DB;
# public function handle()
# {
#     echo 'Hello world';
#     // DB:: commands can go in here if you use DB at top
# }
# In app/Console/Kernel.php you will find protected variable $commands. Add your Command's class name.
# protected $commands = [
#     // ...
#     Commands\MyCommand::class,
# ];
#php artisan my:command



